<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="lectureMapper">
	<!-- 수민(3) -->
	
	<!-- 강의검색 쿼리 -->
	<select id="search-selectLecture" parameterType="map" resultType="hashmap">
		select *
		from lsearch_view
		where (l_title like '%' || #{search} || '%'
                or l_content like '%' || #{search} || '%')
        <if test="subcate != null">
        	and l_category = #{subcate}
        </if>
        <if test="price != null">
        	<choose>
        		<when test='price == "0"'>
        			and l_price = 0
        		</when>
        		<when test='price == "1"'>
        			and l_price between 1 and 9999
        		</when>
        		<when test='price == "2"'>
        			and l_price between 10000 and 20000
        		</when>
        		<when test='price == "3"'>
        			and l_price between 20000 and 30000
        		</when>
        		<when test='price == "4"'>
        			and l_price > 30000
        		</when>
        	</choose>
        </if>
    </select>
    
    <!-- 인기강의 조회 -->
    <select id="selectHotLectureList" resultType="hashmap">
    	<![CDATA[
    		select rownum, l.*
			from (select l_num, count(l_num), l_changed_name
        			from lec_view
        			group by l_num, l_changed_name
        			order by count(l_num) desc) l
			where rownum < 4
    	]]>
    </select>
    
    <!-- 수민(3) 끝! -->
    
    <select id="search-getListCount" parameterType="map" resultType="_int">
    	select count(*)
    	from lsearch_view
    	where (l_title like '%' || #{search} || '%'
                or l_content like '%' || #{search} || '%')
    	 <if test="subcate != null">
        	and l_category = #{subcate}
        </if>
        <if test="price != null">
        	<choose>
        		<when test='price == "0"'>
        			and l_price = 0
        		</when>
        		<when test='price == "1"'>
        			and l_price between 1 and 9999
        		</when>
        		<when test='price == "2"'>
        			and l_price between 10000 and 20000
        		</when>
        		<when test='price == "3"'>
        			and l_price between 20000 and 30000
        		</when>
        		<when test='price == "4"'>
        			and l_price > 30000
        		</when>
        	</choose>
        </if>
    </select>
    
  
	<select id="getListCount" resultType="_int">
		select count(*)
		from lecture
		where l_status='Y' and l_confirm='Y'
	</select>
	
	
 	<select id="selectLectureList" resultType="hashmap">
		select l_num, l_content, l_title, l_category, l_price, l_system, l_address, l_object, l_confirm, l_image_num, l_origin_name, l_changed_name, m_name, m_nickname, m_changed_name
		from lecture l
			left join lecture_image li using(l_num)
			left join member m using(m_id)
			left join member_image mi using(m_id)
		where l_confirm = 'Y' and l_status ='Y' and l_file_level=0
		order by l_num desc
	</select>
  
	<select id="getCategoryListCount" parameterType="string" resultType="_int">
		select count(*)
		from lecture
		where l_status='Y' and l_confirm='Y' and l_category = #{l_category}
		order by l_num desc
	</select>
  
	<select id="selectLectureCategoryList" parameterType="string" resultType="hashmap">
		select l_num, l_content, l_title, l_category, l_price, l_system, l_address, l_object, l_confirm, l_image_num, l_origin_name, l_changed_name, m_name, m_nickname, m_changed_name
		from lecture l
			left join lecture_image li using(l_num)
			left join member m using(m_id)
			left join member_image mi using(m_id)
		where l_confirm = 'Y' and l_status ='Y' and l_file_level=0 and l_category=#{l_category}
		order by l_num desc
	</select>
  
	<select id="selectLecture" parameterType="_int" resultType="map">
		select l_num, l_content, l_title, l_category, l_price, l_system, l_address, l_object, l_confirm, m_name, m_nickname, m_changed_name
		from lecture l
			left join member m using(m_id)
			left join member_image mi using(m_id)
		where l_num=#{l_num}
	</select>
  
	<select id="selectLectureImage" parameterType="hashmap" resultType="map">
		select l_image_num, l_origin_name, l_changed_name, l_file_level, l_num
		from lecture_image
		where l_num=#{l_num} and l_file_level = #{MCR}
	</select>
  
  	<select id="findEachNum" parameterType="_int" resultType="string">
  		select *
  		from (select min(l_each_num)
  			  from lecture_each
  			  where l_num = #{l_num})
  	</select>
  
	<select id="classEnter" parameterType="hashmap" resultType="Lecture_Each">
		select *
		from lecture_each
		where l_num = #{l_num} and l_each_num=#{l_each_num}
	</select>
  
	<select id="classList" parameterType="_int" resultType="map">
		select *
		from lecture_each
			left join lecture_file using(l_each_num)
		where l_num = #{l_num} and l_each_confirm = 'Y'
	</select>
  
	<select id="selectLectureFile" parameterType="_int" resultType="Lecture_File">
		select *
		from lecture_file
		where l_each_num = #{l_each_num}
	</select>
  

	<select id="mediaEnter" parameterType="_int" resultType="map">
		select *
		from lectureFileView
		where l_each_num = #{l_each_num}
	</select>
	


 	<select id="selectNewLectureList" resultType="hashmap">
		<![CDATA[
		select rownum, lv.*
		from ( select l.* from lsearch_view l order by l.l_num desc) lv
        where rownum <= 5]]>
	</select> 

  
	<insert id="permissionLecture" parameterType="Lecture">
		insert into lecture
		values(lecture_seq.nextval, #{ l_category }, #{ l_title }, #{ l_content }, #{ l_price }, #{ l_system }, #{ l_address }, #{ l_object }, default, default, null, #{ m_id })
	</insert>
	
	<insert id="insertLecture_Image" parameterType="Lecture_Image">
		insert into lecture_image
		values(lecture_image_seq.nextval, #{ l_origin_name }, #{ l_changed_name }, #{l_file_level}, sysdate, #{ l_num })
	</insert>
	<insert id="insertLecture" parameterType="Lecture_Each">
		insert into lecture_each
		values(lecture_each_seq.nextval, #{l_each_name}, #{l_each_content}, default, #{l_num})
	</insert>
	<insert id="insertLectureFile" parameterType="Lecture_File">
		insert into lecture_file
		values(lecture_file_seq.nextval, #{ l_file_origin_name }, #{l_file_changed_name}, #{l_file_video}, lecture_each_seq.currval)
	</insert>
	<update id="updateLecture_Image" parameterType="Lecture_Image">
		update lecture_image
		set l_origin_name = #{ l_origin_name }, l_changed_name = #{l_changed_name}
		where l_num = #{ l_num } and l_file_level=0
	</update>
	<select id="findValue" resultType="_int">
		select count(*)
		from lecture
	</select>
	<delete id="dropLectureImage" parameterType="hashmap">
		delete from lecture_image
		where l_num = #{l_num} and l_file_level = #{MCR}
	</delete>
	<update id="updateLecture" parameterType="Lecture">
		update lecture
		set l_title = #{l_title}, l_category = #{l_category}, l_content=#{l_content}, l_price=#{l_price}, l_system=#{l_system}, l_address=#{l_address}, l_object=#{l_object}
		where l_num = #{l_num}
	</update>
	<update id="confirmLecture" parameterType="_int">
		update lecture
		set l_confirm = 'Y'
		where l_num = #{l_num}
	</update>
	<update id="denyLecture" parameterType="_int">
		update lecture
		set l_status = 'N'
		where l_num = #{l_num}
	</update>
	<select id="deleteLecture" parameterType="_int" resultType="hashmap">
		select *
		from lecture_image
		where l_num = #{l_num}
	</select>
	<delete id="deleteLectureImage">
		delete from lecture_image
		where l_num = #{l_num}
	</delete>
	<update id="updateLectureEach" parameterType="Lecture_Each">
		update lecture_each
		set l_each_name = #{l_each_name}, l_each_content = #{l_each_content}
		where l_each_num = #{l_each_num}
	</update>
	<update id="updateLectureFile" parameterType="Lecture_File">
		update lecture_file
		set l_file_origin_name = #{l_file_origin_name}, l_file_changed_name=#{l_file_changed_name}, l_file_video=#{l_file_video}
		where l_each_num = #{l_each_num}
	</update>
	<update id="enableLectureEach" parameterType="_int">
		update lecture_each
		set l_each_confirm = 'N'
		where l_each_num = #{l_each_num}
	</update>
</mapper>
